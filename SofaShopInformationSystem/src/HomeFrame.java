/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author navee
 */

import java.io.IOException;
import java.awt.Desktop; 
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import javax.swing.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

 public class HomeFrame extends javax.swing.JFrame {

    /**
     * Creates new form HomeFrame
     */
    public HomeFrame() {
        initComponents();
    }
    adddatawindow adddata = new adddatawindow();
    
    
    
     private int findminvalue(List<Object[]> data, double minPrice) {
        int left = 0, right = data.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            double price = (Double) data.get(mid)[4];
            if (price < minPrice) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
       private int findmaxvalue(List<Object[]> data, double maxPrice) {
        int left = 0, right = data.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            double price = (Double) data.get(mid)[4];
            if (price > maxPrice) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return right;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cleartable = new javax.swing.JButton();
        ADDButton = new javax.swing.JButton();
        searchButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Jtable1 = new javax.swing.JTable();
        Max = new javax.swing.JTextField();
        min = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        HomeMenuBar1 = new javax.swing.JMenuBar();
        SaveMenubarItem = new javax.swing.JMenu();
        DisplayallItem1 = new javax.swing.JMenuItem();
        HelpMenuItem = new javax.swing.JMenuItem();
        AboutMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Sofa Shop Inventory!");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 190, -1));

        cleartable.setBackground(new java.awt.Color(0, 0, 153));
        cleartable.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cleartable.setForeground(new java.awt.Color(255, 255, 0));
        cleartable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/brush.png"))); // NOI18N
        cleartable.setText("CLEAR TABLE");
        cleartable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cleartable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleartableActionPerformed(evt);
            }
        });
        jPanel1.add(cleartable, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 400, 170, -1));

        ADDButton.setBackground(new java.awt.Color(0, 0, 153));
        ADDButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ADDButton.setForeground(new java.awt.Color(255, 255, 0));
        ADDButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/add.png"))); // NOI18N
        ADDButton.setText("ADD DATA");
        ADDButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ADDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ADDButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 170, -1));

        searchButton3.setBackground(new java.awt.Color(0, 0, 153));
        searchButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        searchButton3.setForeground(new java.awt.Color(255, 255, 0));
        searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/search.png"))); // NOI18N
        searchButton3.setText("SEARCH ");
        searchButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 350, 174, -1));

        Jtable1.setAutoCreateRowSorter(true);
        Jtable1.setBackground(new java.awt.Color(0, 0, 153));
        Jtable1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        Jtable1.setForeground(new java.awt.Color(255, 255, 255));
        Jtable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SofaID", "Catogory", "Sofa Name", "Color", "Price(Â£)", "Available Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Jtable1.setToolTipText("");
        Jtable1.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(Jtable1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 940, 310));

        Max.setBackground(new java.awt.Color(255, 255, 255));
        Max.setForeground(new java.awt.Color(0, 0, 153));
        Max.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        Max.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxActionPerformed(evt);
            }
        });
        jPanel1.add(Max, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 350, 90, 30));

        min.setBackground(new java.awt.Color(255, 255, 255));
        min.setForeground(new java.awt.Color(0, 0, 153));
        min.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        jPanel1.add(min, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 350, 90, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Max Price:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 360, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Min Price:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 360, -1, -1));

        deleteButton.setBackground(new java.awt.Color(0, 0, 153));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 0));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/delete.png"))); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, 170, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 450));

        HomeMenuBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        HomeMenuBar1.setToolTipText("");

        SaveMenubarItem.setText("File");

        DisplayallItem1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DisplayallItem1.setText("DISPLAY ALL");
        DisplayallItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayallItem1ActionPerformed(evt);
            }
        });
        SaveMenubarItem.add(DisplayallItem1);

        HelpMenuItem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        HelpMenuItem.setText("HELP!");
        HelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpMenuItemActionPerformed(evt);
            }
        });
        SaveMenubarItem.add(HelpMenuItem);

        AboutMenuItem1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        AboutMenuItem1.setText("ABOUT!");
        AboutMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuItem1ActionPerformed(evt);
            }
        });
        SaveMenubarItem.add(AboutMenuItem1);

        HomeMenuBar1.add(SaveMenubarItem);

        setJMenuBar(HomeMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cleartableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleartableActionPerformed
        Clear();
    }//GEN-LAST:event_cleartableActionPerformed
   
    
    private void ADDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDButtonActionPerformed

        adddata.setVisible(true);
        adddata.pack();
        adddata.setLocationRelativeTo(null);
        adddata.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        
        
    }//GEN-LAST:event_ADDButtonActionPerformed
    
    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
    adddata.dispose();                                          
    String minprice= min.getText().trim();
    String maxprice = Max.getText().trim();

  
    if (minprice.isEmpty() || maxprice.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a valid price range.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    double minPrice, maxPrice;
    
    try {
        minPrice = Double.parseDouble(minprice);
        maxPrice = Double.parseDouble(maxprice);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "enter valid numbers as price range.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    
    if (minPrice < 0 || maxPrice < 0) {
        JOptionPane.showMessageDialog(this, "the price range is not supported.", " Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

   
    if (minPrice > maxPrice) {
        JOptionPane.showMessageDialog(this, "Enter valid minimum and maximum price.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
            Search();
            
    }//GEN-LAST:event_searchButton3ActionPerformed

    private void AboutMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuItem1ActionPerformed
        
        JOptionPane.showMessageDialog(null,
            "SOFA SHOP INFORMATION SYSTEM v1.0 \n Created by: NAVEEN WITHANA\n APRIL 2025\n STUDENT ID :- 22037538","About!",
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_AboutMenuItem1ActionPerformed

    private void HelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpMenuItemActionPerformed
        File file = new File("src/Resources/ReadMe!.txt");
        // Check if the file exists
        if (file.exists()) {
            // Check if it is supported on the current Pc
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(file);  // Open the file with the defualt text editor of the pc"
                } catch (IOException ex) {
                    Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_HelpMenuItemActionPerformed

    private void DisplayallItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayallItem1ActionPerformed
        LoadData();
    }//GEN-LAST:event_DisplayallItem1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        LoadData();
    }//GEN-LAST:event_formWindowOpened

    private void MaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaxActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int row = Jtable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) Jtable1.getModel();
        if (row < 0){
            JOptionPane.showMessageDialog(this,"No Rows is Selected to Delete","Error",JOptionPane.ERROR_MESSAGE);
        }else{
            int modelRow = Jtable1.convertRowIndexToModel(row);
            ((DefaultTableModel) Jtable1.getModel()).removeRow(modelRow);
            // update the csv
    try (FileWriter fw = new FileWriter("src/sofa_inventory.csv", false);
         BufferedWriter bw = new BufferedWriter(fw);
         PrintWriter out = new PrintWriter(bw)) {
        out.println("Sofa ID,Category,Sofa Name,Colours,Price(GBP),Availability");
        for (int i = 0; i < model.getRowCount(); i++) {
            out.println(
                model.getValueAt(i, 0) + "," +
                model.getValueAt(i, 1) + "," +
                model.getValueAt(i, 2) + "," +
                model.getValueAt(i, 3) + "," +
                model.getValueAt(i, 4) + "," +
                model.getValueAt(i, 5)
            );
        }

        JOptionPane.showMessageDialog(this, "Selected records has been deleted!", "Success", JOptionPane.INFORMATION_MESSAGE);

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Deletion is unsuccessful!" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } 
    }  
    }//GEN-LAST:event_deleteButtonActionPerformed

    
    
    private void Search (){
            DefaultTableModel model = (DefaultTableModel) Jtable1.getModel();
  
        List<Object[]> allRows = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            allRows.add(new Object[]{
                model.getValueAt(i, 0),
                model.getValueAt(i, 1),
                model.getValueAt(i, 2),
                model.getValueAt(i, 3),
                Double.parseDouble(model.getValueAt(i, 4).toString()),
                model.getValueAt(i, 5)
            });
        }

        allRows.sort(Comparator.comparingDouble(row -> (Double) row[4]));

        double minPrice = Double.parseDouble(min.getText());
        double maxPrice = Double.parseDouble(Max.getText());

        int lowerIndex = findminvalue(allRows, minPrice);
        int upperIndex = findmaxvalue(allRows, maxPrice);

        List<Object[]> matchingRows = new ArrayList<>();
        String resultMessage = "";

        if (lowerIndex <= upperIndex) {
            for (int i = lowerIndex; i <= upperIndex; i++) {
                Object[] row = allRows.get(i);
                matchingRows.add(row);
                resultMessage += "Sofa Name: " + row[2] + " | Availablity: " + row[5] + " pcs\n";
            }
        }

        model.setRowCount(0);
        for (Object[] row : matchingRows) {
            model.addRow(row);
        }

        if (matchingRows.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No products available in this price range.");
        } else {
            resultMessage += "\nTotal Records found: " + matchingRows.size();
            JOptionPane.showMessageDialog(this, resultMessage, 
                "products in price range: " + minPrice + " - " + maxPrice, JOptionPane.INFORMATION_MESSAGE);
        }
    }
    }
    

    
    private void Clear(){
        DefaultTableModel model = (DefaultTableModel) Jtable1.getModel();
        model.setRowCount(0);
        min.setText("");        
        Max.setText("");   
}
    public static void addrow(Object[] dataRow){
        
        DefaultTableModel model = (DefaultTableModel)Jtable1.getModel();
        model.addRow(dataRow);
        
    }
   
   
    public void LoadData() {
        DefaultTableModel model = (DefaultTableModel) Jtable1.getModel();
        try (BufferedReader br = new BufferedReader(new java.io.FileReader("src/sofa_inventory.csv"))) {
            String line;
            String[] headers = br.readLine().split(",");
            model.setColumnIdentifiers(headers); // Set headers
            
            while ((line = br.readLine()) != null) {
                model.addRow(line.split(",")); // Add rows
            }
        } catch (IOException e) {
        }
    
    }
    
    
    
    
    
    public void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HomeFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADDButton;
    private javax.swing.JMenuItem AboutMenuItem1;
    private javax.swing.JMenuItem DisplayallItem1;
    private javax.swing.JMenuItem HelpMenuItem;
    private javax.swing.JMenuBar HomeMenuBar1;
    private static javax.swing.JTable Jtable1;
    private javax.swing.JTextField Max;
    private javax.swing.JMenu SaveMenubarItem;
    private javax.swing.JButton cleartable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField min;
    private javax.swing.JButton searchButton3;
    // End of variables declaration//GEN-END:variables

